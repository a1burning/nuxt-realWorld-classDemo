# 自动部署的名称
name: Publish And Deploy Demo
# 当提交代码(有tag标签以v开头的时候)push的时候触发
on:
  push:
    tags:
      - 'v*'
# 执行的工作
jobs:
  # 编译和部署
  build-and-deploy:
    # 运行环境 ubuntu-linux
    runs-on: ubuntu-latest
    steps:

    # 下载源码
    - name: Checkout
      uses: actions/checkout@master

    # 打包构建
    - name: Build
      uses: actions/setup-node@master
    - run: npm install
    - run: npm run build
    # 把需要的文件打一个压缩包
    - run: tar -zcvf release.tgz .nuxt static nuxt.config.js package.json package-lock.json pm2.config.json

    # 发布 Release
    # 创建release，我们可以在release仓库中看到一个一个的版本
    - name: Create Release
      id: create_release
      uses: actions/create-release@master
      env:
        # 这里有使用到TOKEN
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        # 标签名称，release名称
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        # 是否是草稿，不是
        draft: false
        # 是否是预发布，不是是正式发布
        prerelease: false

    # 上传构建结果(刚才打包生成的tgz)到 Release
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        # 上传的地址，上传的地址是通过创建release得到的
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # 上传的文件
        asset_path: ./release.tgz
        # 上传之后的文件名
        asset_name: release.tgz
        asset_content_type: application/x-tgz

    # 部署到服务器
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        # 远程服务器的host，用户名，密码，端口号
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        # 执行命令构建
        # cd 的目录要确保远程服务器中有
        # wget 将github的release包下载到远程服务器
        # tar 将压缩的发布包解压
        # npm i安装依赖
        # pm2 把服务启动
        script: |
          cd /root/realworld-nuxtjs
          wget https://github.com/a1burning/nuxt-realWorld-classDemo/releases/latest/download/release.tgz -O release.tgz
          tar zxvf release.tgz
          npm install --production
          pm2 reload pm2.config.json
